* Integrate tplog to your project

Tplog can be included in your project in two ways:

1. As header sources.  Typically used in single-module product which consists of to only one exe file.
2. As separate DLL.  Typically used in multi-module product which consists of one or more exe/dll files.

Though method 1 works well on multi-module products, method 2 is recommended for minimizing resources consumption.

** Using tplog header directly

1. Import all files in tplog\include to your source tree.  You can either import entire tplog to one sub-directory into your project, or just copy tplog\include\*.* to somewhere in your project. Following sections will suppose that your project is in C:\rainbow and tplog header files are placed to C:\rainbow\thirdparty\tplog\include\*.*.
2. Implement tplog singleton.  You must select one (and only one) cpp file to include =tplog_singleton.h= which implements a singleton =CLogController=.

#+begin_src c
    #include <tplog_singleton.h>
#+end_src

Note again that this file can only be included in only one cpp file.

** Using tplog as a separate DLL

1. Build tplib.
   Open solution file, select desired configuration and platform, then run build. "tplog.dll" and "tplog.lib" are generated in the following dir:
   =output\$(Configuration)\$(Platfrom)=
2. Select how to use tplog.dll: static load or dynamic load
   a) if you want to static load tplog.dll, you must define macro TPLOG_USE_AS_DLL, then link tplog.lib in your project.
   b) if you want to dynamic load tplog.dll, you must define macro TPLOG_USE_AS_DLL_DYNAMIC_LOAD, you do not need to do the real works like "LoadLibrary" etc, tplog.h will do it for you
3. Distrubute tplog.dll as one of your product modules

** About tplog.h
The only header files for configuration and writing log is =tplog.h=. 
Typically it's included in one common used header file, such as =stdafx.h=. 
So that different cpp files which need to write log doesn't have to include =tplog.h= separately.
All code fragments below will assume that you have already include =tplog.h= somewhere.

* Tplog initialization and cleanup

You must initialize the /log controller/ and add one or more /output devices/ before do logging. 
The initialization code is like following:
#+begin_src c
ILogController *pController = GetLogController();
pController->Init(NULL);
pController->AddOutputDevice(L"pipe", LODT_PIPE, L"enable:true");
#+end_src

You must cleanup the /log controller/ before your program exit.
The cleanup code is like following:
#+begin_src c
ILogController *pController = GetLogController();
pController->UnInit();
#+end_src

All log statements before tplog initialization or after tplog cleanup has no effect.

The Recommended initialization and cleanup occasions are:

| module type | initialization                       | cleanup                        |
|-------------+--------------------------------------+--------------------------------|
| exe         | at the beginning of main()/WinMain() | at the end of main()/WinMain() |
| dll         | in DllMain, on process attach        | in DllMain, on process detach  |

* Write logs

Use "Log" whenever you want to log something:

#+begin_src c
Log(LL_EVENT, L"flow;main", L"Program started.");
Log(LL_DEBUG, L"perf;", L"start time: %u", time(NULL));
#+end_src

The first parameter is log-class, there are 4 predefined log-classes:

- =LOG_DIAGNOSE=, for very detailed information, such as function enter/exit
- =LOG_DEBUG=, for information which may help debug, such as "The current user name is '%s'"
- =LOG_EVENT=, for events which may affect control flow, such as "Received new connection from client"
- =LOG_ERROR=, for unexpected conditions, such as "Create database failed!"

The second parameter is log-tag, which is useful for classifying/filtering large amount of logs. 
Multiple tags are spearated with ";".
following are examples of tags: 
- =perf;startup=  
- =network;common;sip;=
In most cases, one developer only cares about one or two specific tag(s) which is related to the problem he meet. 
Since tags are several strings, the freeform makes tags very flexiable and filtering logs very easy.

The third parameter is the printf-style format string and all following parameters are format parameters. See /printf/ for help.

* Customize tplog

# TODO

; ±¾ÎÄ¼þÎªbdlogµÄÈÕÖ¾Êä³ö¿ØÖÆÎÄ¼þ
; ±¾ÎÄ¼þÂ·¾¶£º%ALLUSERSPROFILE%\Application Data\Baidu\<²úÆ·Ãû>\bdlog.ini
; ²úÆ·ÃûÈçBaiduBrowser, BaiduPinyinµÈ

[LOG_CONFIG]

; ÊÇ·ñ¼àÊÓÅäÖÃÎÄ¼þ±ä»¯£¬ÈôÎª0, ÈÕÖ¾ÏµÍ³²»¼àÊÓ±¾ÎÄ¼þµÄ±ä»¯¡£
; ´ËÉèÖÃÖ»ÔÚÈÕÖ¾ÏµÍ³³õÊ¼»¯Ê±¶ÁÒ»´Î£¬ÔËÐÐ¹ý³ÌÐÞ¸Ä´ËÖµ¶ÔÈÕÖ¾ÏµÍ³ÎÞÓ°Ïì
monitor_config_change=1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; ÒÔÏÂÒÔld_¿ªÍ·µÄÏîÊÇ¸÷¸öÈÕÖ¾Êä³öÉè±¸µÄÅäÖÃ£¬ÅäÖÃ¸ñÊ½ÊÇÒ»¸ö»ò¶à¸ökey:value¶Ô£¨¿Õ¸ñ·Ö¸ô£©
; ÒÔÏÂÍ¨ÓÃÅäÖÃ¶ÔÈÎºÎÈÕÖ¾Êä³öÉè±¸¾ùÓÐÐ§£º
; 1. enable Ö¸¶¨´ËÈÕÖ¾Êä³öÉè±¸ÊÇ·ñÆôÓÃ£¬È¡Öµfalse/true
; 2. filter ¹ýÂËÉèÖÃ£¬Ö§³Ö¶ÔtagºÍlevel½øÐÐ¹ýÂË¡£ÀýÈç:
;    filter:tag=perf         ±íÊ¾ËùÓÐtagÖÐ°üº¬perfµÄÈÕÖ¾¶¼»áÊä³ö
;    filter:!(tag=perf)      ±íÊ¾ËùÓÐtagÖÐ²»°üº¬perfµÄÈÕÖ¾¶¼»áÊä³ö
;    filter:level>16         ±íÊ¾ËùÓÐ¼¶±ð´óÓÚµ÷ÊÔ¼¶±ðµÄÈÕÖ¾
;    filter:tag=perf&&level>16
;    filter:!(tag=perf)||level>16


; ¹ÜµÀÈÕÖ¾£¨ÈÕÖ¾²é¿´Æ÷£©ÅäÖÃ
; 	
; È±Ê¡ÅäÖÃ£ºenable:false
; ÕâÀïµÄÖµ»áµþ¼Óµ½È±Ê¡ÅäÖÃ£¬ÈôÊôÐÔÒ»Ñù£¬Ôò¸²¸ÇÈ±Ê¡ÅäÖÃÖÐµÄÖµ
ld_pipe=enable:false


; ÎÄ¼þÈÕÖ¾ÅäÖÃ
; 	share_read  ÒÔ¹²Ïí¶ÁÄ£Ê½´ò¿ª 0/1 È±Ê¡1
;       async       Òì²½Ð´Ä£Ê½ 0/1 È±Ê¡0
;       buffer_size ÎÄ¼þ»º´æ£¬µ¥Î»×Ö½Ú£¬È±Ê¡1000000
; 	path        ÈÕÖ¾ÎÄ¼þÂ·¾¶£¬Ö§³ÖÒÔÏÂÌØÊâÔªËØ
; 	            ${PID} µ±Ç°½ø³ÌID
; 	            ${T}, ${DATE}, ${TIME} µ±Ç°Ê±¼ä ¸ñÊ½·Ö±ðÎª£ºyyyymmddHHMMSS, yyyymmdd, HHMMSS
; È±Ê¡ÅäÖÃ: enable:false path:`%temp%\\Baidu\\BaiduProduct\\log\\ime_${T}_${PF}.xlog`
; ÕâÀïµÄÖµ»áµþ¼Óµ½È±Ê¡ÅäÖÃ£¬ÈôÊôÐÔÒ»Ñù£¬Ôò¸²¸ÇÈ±Ê¡ÅäÖÃÖÐµÄÖµ
ld_file=enable:false


; ¹²ÏíÄÚ´æÅäÖÃ
; È±Ê¡ÅäÖÃ: enable:true filter:!(tag=perf)
ld_sharememory=enable:true


; debugoutput
; È±Ê¡ÅäÖÃ: enalbe:false
ld_debugoutput=enable:false
